name: Terraform-AWS

on:
    push:
        branches:
            - dev
    pull_request:
env:
    tf_version: 'latest'
    tf_working_dir: '.'

jobs:
    terraform:
        name: 'Terraform check'
        runs-on: ubuntu-latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v2
            - name: 'Terraform Setup'
              id: setup
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.2.3
            - name: 'Terraform init'
              id: init
              run: terraform init
              continue-on-error: true
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            - name: 'Terraform Validate'
              id: validate
              run: terraform validate -no-color
            - name: 'Terraform Plan'
              id: plan
              run: terraform plan -no-color
              continue-on-error: true
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                TF_VAR_PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
                TF_VAR_ENV: ${{ secrets.ENV }}
                TF_VAR_DOMAIN: ${{ secrets.DOMAIN }}

            - name: 'Fetch App image name'
              id: app_image
              run: |
                export app_image=$(terraform plan -no-color|grep app_images|cut -d\" -f2)
                echo "::set-env name=app_image::$app_image"
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                TF_VAR_PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
                TF_VAR_ENV: ${{ secrets.ENV }}
                TF_VAR_DOMAIN: ${{ secrets.DOMAIN }}

            - run: echo $app_image

            - name: Run Trivy vulnerability scanner
              id: trivy
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: $app_image
                format: 'sarif'
                output: 'trivy-results.sarif'

            - name: Upload Trivy scan results to GitHub Security tab
              id: trivy-results
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: 'trivy-results.sarif'
